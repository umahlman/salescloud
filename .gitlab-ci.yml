####################################################
# Set variables
####################################################

####################################################
# The docker image the jobs initialize with.
# We use nodejs, so a node image makes sense.
# https://docs.gitlab.com/ee/ci/yaml/README.html#image
####################################################
image: "node:latest"

####################################################
# Cache node modules between jobs.
# Downloading node dependencies can take a long time,
# avoiding that cost between jobs/stages is good.
# statusid.txt is used to pass the statusid between jobs
# https://docs.gitlab.com/ee/ci/yaml/README.html#cache
####################################################
cache:
  key: ${CI_COMMIT_REF_NAME}
  paths:
    - node_modules/
    - .sfdx/
    - statusid.txt

####################################################
# The sequential stages of this pipeline.
# Jobs within a stage run in parallel.
# https://docs.gitlab.com/ee/ci/yaml/README.html#stages
####################################################
stages:
  - validate
  - deploy
  - cleanup

####################################################
# Validate metadata against the migration org, if there are no conflicts
####################################################
validate-migration:
  stage: validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "migration"
  allow_failure: false
  environment:
    name: migration
    url: https://test.salesforce.com
  script:
    - install_jq
    - trigger_pipeline
    - install_salesforce_cli
    - authenticate migration $MIGRATION_AUTH_URL
    - validate_metadata migration RunLocalTests

####################################################
# Validate metadata against the test org, if there are no conflicts
####################################################
validate-test:
  stage: validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
  allow_failure: false
  environment:
    name: test
    url: https://test.salesforce.com
  script:
    - install_jq
    - trigger_pipeline
    - install_salesforce_cli
    - authenticate test $TEST_AUTH_URL
    - validate_metadata test RunLocalTests

####################################################
# deploy to migration
####################################################
deploy-to-migration:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == 'migration'
  allow_failure: false
  environment:
    name: migration
    url: https://test.salesforce.com
  script:
    - install_salesforce_cli
    - install_jq
    - authenticate migration $MIGRATION_AUTH_URL
    - validate_metadata migration RunLocalTests
    - deploy_metadata migration

####################################################
# deploy to test
####################################################
deploy-to-test:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == 'test'
  allow_failure: false
  environment:
    name: test
    url: https://test.salesforce.com
  script:
    - install_salesforce_cli
    - install_jq
    - authenticate test $TEST_AUTH_URL
    - validate_metadata test RunLocalTests
    - deploy_metadata test

####################################################
####################################################
# TBC -> Deploy to PROD
####################################################
####################################################

cleanup:
  stage: cleanup
  only:
    variables:
      - $CI_COMMIT_REF_NAME =~ /deploy_build_.*/
  script:
    - rm statusid.txt
  when: always

.sfdx_helpers: &sfdx_helpers |





  # Function to install the Salesforce CLI.
  # No arguments.
  function install_salesforce_cli() {
    # Salesforce CLI Environment Variables
    # https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_env_variables.htm
    # By default, the CLI periodically checks for and installs updates.
    # Disable (false) this auto-update check to improve performance of CLI commands.
    export SFDX_AUTOUPDATE_DISABLE=false
    # Set to true if you want to use the generic UNIX keychain instead of the Linux libsecret library or macOS keychain.
    # Specify this variable when using the CLI with ssh or "headless" in a CI environment.
    export SFDX_USE_GENERIC_UNIX_KEYCHAIN=true
    # Specifies the time, in seconds, that the CLI waits for the Lightning Experience custom domain to resolve and become available in a newly-created scratch org.
    # If you get errors about My Domain not configured when you try to use a newly-created scratch org, increase this wait time.
    export SFDX_DOMAIN_RETRY=300
    # For force:package:create, disables automatic updates to the sfdx-project.json file.
    export SFDX_PROJECT_AUTOUPDATE_DISABLE_FOR_PACKAGE_CREATE=true
    # For force:package:version:create, disables automatic updates to the sfdx-project.json file.
    export SFDX_PROJECT_AUTOUPDATE_DISABLE_FOR_PACKAGE_VERSION_CREATE=true
    # Install Salesforce CLI
    mkdir sfdx
    CLIURL=https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
    wget -qO- $CLIURL | tar xJ -C sfdx --strip-components 1
    "./sfdx/install"
    export PATH=./sfdx/$(pwd):$PATH
    # Output CLI version and plug-in information
    sfdx update
    sfdx --version
    sfdx plugins --core
  }

  # curexus specific functions

  #checks whether current merge request has conflicts and triggers appropiate pipelines
  # Arguments
  #     $1 = gitlab project id
  #     $2 = merge request iid
  #     $3 = bearer token
  function trigger_pipeline() {
    HAS_CONFLICTS=$( curl --request GET "$CI_API_V4_URL/projects/$CI_MERGE_REQUEST_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID" \
     --header "Authorization: Bearer $BEARER" | jq --raw-output ".has_conflicts" )
    if [[ $HAS_CONFLICTS == true ]]; then
      echo $HAS_CONFLICTS
      echo "The Job has conflicts"
      exit 1;
    else
      echo "Creating the job"
    fi
  }

  # Function to install jq json parsing library.
  # No arguments.
  function install_jq() {
    apt update && apt -y install jq
  }

  function authenticate() {
    local alias_to_set=$1
    local org_auth_url=$2
    local org_auth_url_backup=$3
    local file=$(mktemp)
    echo $org_auth_url > $file
    local cmd="sfdx force:auth:sfdxurl:store --sfdxurlfile $file --setalias $alias_to_set --json" && (echo $cmd >&2)
    local output=$($cmd)
    sfdx force:config:set defaultusername=$alias_to_set
    sfdx force:config:set defaultdevhubusername=$alias_to_set
    rm $file
  }

  # validates metadata defined in a manifest/package.xml to the org.
  # Arguments
  #     $1 = org username to deploy to
  function validate_metadata() {
    local org_username=$1
    local testlevel=$2
    if [ ! $org_username ]; then
      echo "ERROR No org username provided to 'validate_metadata' function" >&2
      exit 1;
    fi
    if [ ! $testlevel ]; then
      echo "ERROR No org testlevel provided to 'validate_metadata' function" >&2
      exit 1;
    fi
    local cmd="sfdx force:source:deploy -l RunLocalTests -w 0 -x manifest/package.xml -c -l $testlevel -u $org_username --json" && (echo $cmd >&2)
    local output=$($cmd)
    echo "debug" >&2
    local status_id=$(echo $output | jq -r '.result.id') && (echo $status_id  >&2)
    if [ "$status_id" == "null" ]; then
      echo $output | jq '.' >&2
      exit 1;
    fi
    echo $status_id > statusid.txt
    local report_cmd="sfdx force:source:deploy:report  -i $status_id -u $org_username --json" && (echo $report_cmd >&2)
    local report_result=$($report_cmd) && (echo $report_result >&2)
    local success=$(echo $report_result | jq -r '.status')
    if [ ! $success -eq 0  ]; then
      echo "ERROR validation failed" >&2
      exit 1;
    fi
    cat statusid.txt >&2
  }

  # Deploys metadata to the org.
  # Arguments
  #     $1 = org username to deploy to

  function deploy_metadata() {
    local org_username=$1
    if [ ! $org_username ]; then
      echo "ERROR No org username provided to 'deploy_metadata' function" >&2
      exit 1;
    fi
    local status_id=$(cat statusid.txt)
    if [ ! $status_id ]; then
      echo "ERROR no status_id handed over on validation" >&2
      exit 1;
    fi
    local cmd="sfdx force:source:deploy -q $status_id -u $org_username --json" && (echo $cmd >&2)
    local output=$($cmd) && (echo $output | jq '.' >&2)
    local success=$(echo $output | jq -r '.status')
     if [ ! $success -eq 0  ]; then
      echo "ERROR deployment failed" >&2
      exit 1;
    fi
  }

before_script:
  - *sfdx_helpers
